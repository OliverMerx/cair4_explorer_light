"""
=================================================
üìÇ CAIR4 ChromaDB Collection Client
=================================================

Dieses Modul verwaltet die Interaktion mit ChromaDB auf Collection-Ebene. Es erm√∂glicht die Erstellung, Verwaltung und Abfrage von Collections, die f√ºr Retrieval-Augmented Generation (RAG) genutzt werden.
ChromaDB ist eine Vektor-Datenbank, die es erm√∂glicht, semantische Suchanfragen auszuf√ºhren. Die Daten werden als numerische Vektoren gespeichert, was eine inhaltliche (nicht nur w√∂rtliche) Suche erlaubt.

üîπ **Aufgrund der unterschiedlichen Modellarchitekturen wird ChromaDB bei CAIR4 prim√§r mit OpenAI genutzt, da OpenAI eine direkte API f√ºr Embeddings bietet.**  
Andere Modelle wie LLaMA oder DeepSeek k√∂nnen ebenfalls eingebunden werden, erfordern jedoch eine separate Embedding-Generierung durch externe Modelle wie SentenceTransformers.

üîß **Funktionalit√§ten:**
- **get_or_create_collection(collection_name)**  
  ‚ûù Erstellt oder l√§dt eine ChromaDB-Collection.
- **list_collection_contents(collection_name, query_text, n_results, embedding_model)**  
  ‚ûù F√ºhrt eine semantische Suche in einer Collection aus.

üöÄ **Anwendungsf√§lle:**
- KI-gest√ºtzte Chatbots mit Langzeitged√§chtnis (RAG)
- Automatische Dokumentensuche und Kategorisierung
- KI-gest√ºtzte Wissensdatenbanken

‚úÖ **Wichtig:**  
Dieses Modul arbeitet mit `chroma_db_client.py` zusammen, das die eigentliche ChromaDB-Verbindung verwaltet.

=================================================
"""

from models.core.CAIR4_chromadb_client import get_or_create_collection  # Verbindung zu ChromaDB-Client

def list_collection_contents(collection_name):
    """
    Listet alle Dokumente einer ChromaDB-Collection auf.
    """
    try:
        collection = get_or_create_collection(collection_name)
        
        results = collection.get(include=["documents", "metadatas"])  # ‚úÖ Holt alle Dokumente + Metadaten

        if not results or "documents" not in results or not results["documents"]:
            print(f"‚ö†Ô∏è Keine Ergebnisse f√ºr Collection '{collection_name}'.")
            return []
        
        return [
            {"name": meta.get("source", "Unknown"), "content": doc, "pages": meta.get("page", 1)}
            for doc, meta in zip(results["documents"], results["metadatas"])
        ]

    except Exception as e:
        print(f"‚ùå Fehler beim Abrufen der Collection-Inhalte: {e}")
        return []