"""
=================================================
üíæ CAIR4 ChromaDB Utility (Modellagnostisch)
=================================================

Dieses Modul stellt die ChromaDB-Verbindung bereit und bietet eine einheitliche Schnittstelle f√ºr Embeddings. 

üîπ **Aufgrund der unterschiedlichen Modellarchitekturen wird ChromaDB bei CAIR4 prim√§r mit OpenAI genutzt, da OpenAI eine direkte API f√ºr Embeddings bietet.**  
Andere Modelle wie LLaMA oder DeepSeek k√∂nnen ebenfalls eingebunden werden, erfordern jedoch eine separate Embedding-Generierung durch externe Modelle wie SentenceTransformers.


üìå **Warum ist das Modul wichtig?**  
- **Persistente Speicherung:** Speichert und verwaltet Vektoren in ChromaDB.  
- **Modellagnostisch:** Unterst√ºtzt **OpenAI** und **SentenceTransformers** f√ºr Embeddings.  
- **Optimiert f√ºr RAG:** Erm√∂glicht schnelle semantische Suchanfragen in KI-Systemen.

üîß **Wichtige Funktionen:**
- **initialize_chroma_client()**  
  ‚ûù Initialisiert ChromaDB mit Persistenz.  
- **generate_embedding(texts, embedding_model)**  
  ‚ûù Erstellt Embeddings f√ºr OpenAI oder lokale Modelle. 
- **get_or_create_collection(collection_name)**  
  ‚ûù Erstellt oder l√§dt eine ChromaDB-Collection. 

üöÄ **Verwendung:**  
Dieses Modul wird insbesondere vom `CAIR4_collection_client.py` aber auch von andern CAIR4-Files genutzt (z.B. CAIR4_upload_view).

=================================================
"""
import os
from pylibs.chromadb_lib import CHROMA_AVAILABLE, initialize_chroma_db

# === 1Ô∏è‚É£ Initialisierung nur, wenn chromadb verf√ºgbar ist
if CHROMA_AVAILABLE:
    chroma_client = initialize_chroma_db()
else:
    chroma_client = None  # oder MockClient, je nach Anwendungsfall

# === 2Ô∏è‚É£ Optional: Embedding-Modell laden (funktioniert unabh√§ngig)
from sentence_transformers import SentenceTransformer
embedding_model = SentenceTransformer("all-MiniLM-L6-v2")

# === 3Ô∏è‚É£ Collection abrufen oder erstellen ===
def get_or_create_collection(collection_name):
    """Holt oder erstellt eine ChromaDB-Collection."""

    if not CHROMA_AVAILABLE or chroma_client is None:
        print("‚ùå ChromaDB ist nicht verf√ºgbar. Collection kann nicht geladen werden.")
        return None

    try:
        collections = [col.name for col in chroma_client.list_collections()]
        if collection_name in collections:
            print(f"‚úÖ Collection '{collection_name}' existiert bereits. Wird geladen.")
            return chroma_client.get_collection(collection_name)

        print(f"‚ö†Ô∏è Collection '{collection_name}' nicht gefunden. Erstelle neue...")
        return chroma_client.create_collection(name=collection_name)

    except Exception as e:
        print(f"‚ùå Fehler beim Zugriff auf ChromaDB: {e}")
        return None